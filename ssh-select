#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;

my $self    = 'ssh-select';
my $VERSION = '1.000';

# connection attempters
sub try_keyscan {
    my %option = @_;
    my @cmd    = qw( ssh-keyscan );
    push @cmd, '-v' if $option{debug} > 1;
    push @cmd, '-T' => $option{timeout} if $option{timeout};
    push @cmd, '-p', $option{port} if $option{port};
    push @cmd, '-4', if $option{4};
    push @cmd, '-6', if $option{6};

    print STDERR "$self: keyscan: @cmd $option{host}\n" if $option{debug};
    chomp( my @keys = `@cmd $option{host}` );

    for my $key (@keys) {
        print STDERR "$self: host key: $key\n" if $option{debug};
        ( undef, undef, $key ) = split / /, $key;
    }
    return $option{key}
      ? !!grep $_ eq $option{key}, @keys
      : !!@keys;
}

sub try_proxy {
    my %option = @_;
    my $class = $option{6} ? 'IO::Socket::INET6' : 'IO::Socket::INET';
    eval "require $class;" or die $@;
    my ( $host, $port ) = split /:/, $option{proxy};
    $port ||= 8080;
    print STDERR "$self: proxy: $host $port\n" if $option{debug};
    my $sock = $class->new(
        PeerHost => $host,
        PeerPort => $port,
        ( Timeout => $option{timeout} )x!!$option{timeout},
    );
    return if !$sock;
    print {$sock} << 'HTTP';
HEAD http://www.google.com/ HTTP/1.0
Host: www.google.com

HTTP
    my $response = <$sock>;
    print STDERR "$self: proxy: $response" if $option{debug};
    my ( undef, $status, $message ) = split / /, $response, 3;
    return $status =~ /^[23]/;    # assume failure for 4xx and 5xx
}

# command generator
sub cmd_nc {
    my %option = @_;
    my @cmd    = ('nc');
    push @cmd, '-w' => $option{timeout} if $option{timeout};
    push @cmd, $option{host}, $option{port};
    return @cmd;
}

sub cmd_proxy {
    my %option = @_;
    my @cmd = ( $option{connect} );
    if ( $option{connect} eq 'socat' ) {
        my ( $proxy, $port ) = split /:/, $option{proxy};
        push @cmd, ('-d') x $option{debug};
        push @cmd, "PROXY:$proxy:$option{host}:$option{port}";
        $cmd[-1] .= ",proxyport=$port" if $port;
        $cmd[-1] .= ",connect-timeout=$option{timeout}" if $option{timeout};
        push @cmd, '-';
    }
    else {
        push @cmd, '-d' if $option{debug};
        push @cmd, '-w' => $option{timeout} if $option{timeout};
        push @cmd, '-H' => $option{proxy};
        push @cmd, $option{host};
        push @cmd, $option{port};
    }
    return @cmd;
}

# MAIN PROGRAM

# command-line options
my %option = (
    debug   => 0,
    timeout => 3,
    connect => 'connect-proxy',
);
GetOptions(
    \%option,
    'local=s',    # private hostname (local network)
    'proxy=s',    # HTTP proxy (CONNECT)
    'relay=s',    # ssh relay (nc)
    'connect=s',  # CONNECT handler
    'key=s',      # reference host key (for validation)
    '4', '6',     # force IP version
    'timeout=i',  # connect timeout
    'debug+',     # debug level
    'help', 'manual', 'version',    # documentation
) or pod2usage( -verbose => 1, -exitval => 2, );

# error checking
pod2usage( -verbose => 1, -message => "-4 and -6 are mutually exclusive" )
  if $option{4} && $option{6};

# simple on-line help
print "$self version $VERSION\n" and exit if $option{version};
pod2usage( -verbose => 1 ) if $option{help};
pod2usage( -verbose => 2 ) if $option{manual};

# target host and port
my ( %local, %target );
@target{qw( host port )} = @ARGV;
$target{port} ||= 22;
if ( $option{local} ) {
    @local{qw( host port )} = split /:/, $option{local};
    $local{port} ||= $target{port};
}

pod2usage( -verbose => 1, -message => "Remote host required" )
  if !defined $target{host};

# environment variables
$option{debug} = $ENV{SSH_SELECT_DEBUG} || 0
  if exists $ENV{SSH_SELECT_DEBUG};
$option{timeout} = $ENV{SSH_SELECT_TIMEOUT} || 0
  if exists $ENV{SSH_SELECT_TIMEOUT};


# TUNNEL SELECTION

my @cmd;

print STDERR "$self: version $VERSION\n" if $option{debug};

# ssh-keyscan successful: direct connection to the local name
if ( %local && try_keyscan( %option, %local ) ) {
    @cmd = cmd_nc( %option, %local );
}

# ssh-keyscan successful: direct connection to the public name
elsif ( try_keyscan( %option, %target ) ) {
    @cmd = cmd_nc( %option, %target );
}

# proxy connection successful: use the proxy
elsif ( $option{proxy} && try_proxy(%option) ) {
    @cmd = cmd_proxy( %option, %target );
}

# ssh relay provided: run nc through it
elsif ( $option{relay} ) {
    my %relay;
    @relay{qw( host port )} = split /:/, $option{relay};
    @cmd = ('ssh');
    push @cmd, ('-v') x ( $option{debug} && $option{debug} - 1 );
    push @cmd, '-p', $relay{port} if $relay{port};
    push @cmd, '-4' if $option{4};
    push @cmd, '-6' if $option{6};
    push @cmd, $relay{host};
    push @cmd, cmd_nc( %option, %target );
}
else {
    die "No suitable connection method found\n";
}

print STDERR "$self: command: @cmd\n" if $option{debug};
exec @cmd;

__END__

=head1 NAME

ssh-select - Try different proxying techniques to SSH to a remote host

=head1 SYNOPSIS

    ssh-select [options] host [port]

=head1 OPTIONS

    --local   <host>[:<port>]    Local name for direct connections
    --proxy   <host>[:<port>]    HTTP proxy (default port: 8080)
    --relay   <host>[:<port>]    SSH relay (default port: 22)

    --connect <command>          The command to use to CONNECT to the proxy
                                 (default: connect-proxy)

    --key     <ssh-key>          Host key (for validation)
    --timeout <seconds>          Connection timeout in seconds (default: 3)
                                 (SSH_SELECT_TIMEOUT environment variable)

    --debug                    * Increase debug level
                                 (SSH_SELECT_DEBUG environment variable)

    -4                           Use IPv4 (default)
    -6                           Use IPv6

    --help                       Print a short help summary and exit
    --manual                     Print the full manual page and exit

Options marked with * can be repeated as necessary.

=head1 DESCRIPTION

B<ssh-select> is a tool for transparently connecting to a SSH server
from different network setups. It is meant to be used as C<ProxyCommand>
in OpenSSH.

The connection is attempted is three steps:

=over 4

=item *

An C<ssh-keyscan> command is run against the target host.

If the I<--local> option is given, the keyscan step is attempted twice:
first against the "local" name, and then against the "public" name.
(This allows using a local name inside a home network, and a public
name outside.)

If a key is returned, then a direct connection to the host is started
(using C<nc>).

When the I<--key> option is given, the SSH connection will only be run
if the key returned by the host is identical. This is mostly useful when
a server on one of the networks has the same address as the target, but
is in fact a different machine.

=item *

If the I<--proxy> option is given, a connection to the given HTTP proxy
is attempted (using a C<HEAD> request). If that request is successful,
a tunnel is established through the proxy using the C<connect-proxy>
command, to connect to the "public" name.

The I<--connect> option defines which external command to use to establish
a connection through the HTTP proxy. The default is C<connect-proxy>.
Supported values are: C<connect-proxy>, C<connect>, C<socat>.

=item *

Finally, if the I<--relay> option is given, a SSH connection through the
relay is tried, running the C<nc> command on the relay, to connect directly
to the target server (using its "public" name).

=cut

If everything fails, the connection is aborted.

=head1 EXAMPLES

Connect to a personal desktop using the local name on the home network,
the public dynamic DNS name from the outside, and the company proxy
from the company network.

    Host home
      Hostname home.example.com
      ProxyCommand ssh-select --local mybox --proxy proxy.bigcorp.com:3128 %h %p

Connect to a workstation directly from the company network, and via a bastion
host from the outside network.

    Host work
      Hostname work.example.com
      ProxyCommand ssh-select --relay bastion.example.com %h %p

=head1 ENVIRONMENT

The following environment variables override the options given on the
command-line. This is useful for debugging, and easier than editing
the C<ProxyCommand> line in F<~/.ssh/config>.

=over 4

=item C<SSH_SELECT_DEBUG>

Sets the value for the I<--debug> option.

For example, a value of C<2> is equivalent to passing C<-v -v> on the
command-line.

=item C<SSH_SELECT_TIMEOUT>

Sets the value for the I<--timeout> option.

=back

=head1 DIAGNOSTICS

=over 4

=item C<No suitable connection method found>

All requested tunnels have been tried and none of them worked.

The I<--debug> option may provide more details. One possibility is that
the timeout is too short and all the connection attempts fail.

=back

=head1 SEE ALSO

ssh(1), connect-proxy(1), nc(1).

=head1 AUTHOR

Philippe Bruhat (BooK) <book@cpan.org>

=head1 COPYRIGHT AND LICENSE

Copyright 2018 by Philippe Bruhat (BooK).

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
