#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use IPC::Open2;

my $self    = 'ssh-select';
my $VERSION = '1.000';

# connection attempters
sub try_keyscan {
    my %option = @_;
    my @cmd    = qw( ssh-keyscan );
    push @cmd, '-v' if $option{debug} > 1;
    push @cmd, '-T' => $option{timeout} if $option{timeout};
    push @cmd, '-p', $option{port} if $option{port};
    push @cmd, '-4', if $option{4};
    push @cmd, '-6', if $option{6};

    print STDERR "$self: keyscan: @cmd $option{host}\n" if $option{debug};

    # temporarily close STDERR, to hide ssh-keyscan's output
    open( my $olderr, ">&STDERR" ) or die "Can't dup STDERR: $!";
    close STDERR or die "Can't close STDERR: $!";

    # run the ssh-keyscan command, and re-open STDERR
    chomp( my @keys = `@cmd $option{host}` );
    open( STDERR, ">&", $olderr ) or die "Can't dup \$olderr: $!";

    for my $key (@keys) {
        print STDERR "$self: host key: $key\n" if $option{debug};
        ( undef, undef, $key ) = split / /, $key;
    }
    return $option{key}
      ? !!grep $_ eq $option{key}, @keys
      : !!@keys;
}

sub try_http_proxy {
    my %option = @_;
    my $port   = $option{http_proxy_port} || 8080;

    print STDERR "$self: http-proxy: $option{http_proxy_host} $port\n" if $option{debug};
    require HTTP::Tiny;
    my $response = HTTP::Tiny->new(
        proxy   => "http://$option{http_proxy}",
        timeout => $option{timeout},
    )->head('http://www.google.com/');

    if( $option{debug} ) {
        print STDERR "$self: http-proxy: $response->{status} $response->{reason}\n";
        print STDERR "$self: http-proxy: $response->{content}"
          if $response->{status} eq '599';
    }
    return $response->{status} =~ /^[23]/;    # assume failure for 4xx and 5xx
}

sub expand_proxy_command {
    my %option = @_;
    my $cmd    = $option{proxy_command};

    # SSH TOKENS:
    # %%    A literal ‘%’.
    # %C    Hash of %l%h%p%r.
    # %d    Local user's home directory.
    # %h    The remote hostname.
    # %i    The local user ID.
    # %L    The local hostname.
    # %l    The local hostname, including the domain name.
    # %n    The original remote hostname, as given on the command line.
    # %p    The remote port.
    # %r    The remote username.
    # %T    The local tun(4) or tap(4) network interface assigned if tunnel forwarding was requested, or "NONE" otherwise.
    # %u    The local username.
    #
    # only %h and %p are supported for now:
    $cmd =~ s/%h/$option{host}/g;
    $cmd =~ s/%p/$option{port}/g;
    return $cmd;
}

sub try_proxy_command {
    my %option = @_;
    my $cmd = expand_proxy_command(%option);

    my ( $pid, $out, $in );
    print STDERR "$self: proxy-command: $cmd\n" if $option{debug};
    eval {
        local $SIG{ALRM} = sub { die "alarm\n" };    # NB: \n required
        alarm $option{timeout};
        open2( $out, $in, $cmd );
        chomp( my $banner = <$out> // '' );
        alarm 0;
        print STDERR "$self: proxy-command: $banner\n" if $option{debug};
        die "Not an SSH banner: $banner\n" if $banner !~ /^SSH-2\.[0-9]+/;
        1;
    } or do {
        if ( $@ =~ /^open2: (.*)/ ) {
            print STDERR "$self: proxy-command: $1\n" if $option{debug};
        }
        elsif ( $@ eq "alarm\n" ) {
            print STDERR "$self: proxy-command: timed out\n" if $option{debug};
        }
        else {
            my ($err) = split /\n/, $@;
            print STDERR "$self: proxy-command: $err\n" if $option{debug};
        }
        return;
    };

    return 1;
}

# command generators
sub cmd_nc {
    my %option = @_;
    my @cmd    = ('nc');
    push @cmd, '-w' => $option{timeout} if $option{timeout};
    push @cmd, ('-v') x $option{debug} if $option{debug};
    push @cmd, $option{host}, $option{port};
    return @cmd;
}

sub cmd_socat {
    my %option = @_;
    my @cmd    = ('socat');
    push @cmd, ('-d') x $option{debug};
    push @cmd, '-';
    my $tcp = $option{4} ? 'TCP4' : $option{6} ? 'TCP6' : 'TCP';
    push @cmd, "$tcp:$option{host}:$option{port}";
    $cmd[-1] .= ",connect-timeout=$option{timeout}"  if $option{timeout};
    return @cmd;
}

sub cmd_http_proxy {
    my %option = @_;
    my @cmd    = ('socat');
    push @cmd, ('-d') x $option{debug};
    push @cmd, "PROXY:$option{http_proxy_host}:$option{host}:$option{port}";
    $cmd[-1] .= ",proxyport=$option{http_proxy_port}"     if $option{http_proxy_port};
    $cmd[-1] .= ",proxyauth=$option{http_proxy_userinfo}" if $option{http_proxy_userinfo};
    $cmd[-1] .= ",connect-timeout=$option{timeout}"  if $option{timeout};
    push @cmd, '-';
    return @cmd;
}

sub cmd_proxy_command {
    my %option = @_;
    return expand_proxy_command(%option);
}

# MAIN PROGRAM

# command-line options
my %option = (
    debug   => 0,
    timeout => 3,
);
GetOptions(
    \%option,
    'local=s',                          # private hostname (local network)
    'http_proxy|http-proxy=s',          # HTTP proxy (CONNECT)
    'proxy_command|proxy-command=s',    # ssh ProxyCommand option
    'relay=s',                          # ssh relay (nc)
    'key=s',                            # reference host key (for validation)
    '4', '6',                           # force IP version
    'timeout=i',                        # connect timeout
    'debug+',                           # debug level
    'help', 'manual', 'version',        # documentation
) or pod2usage( -verbose => 1, -exitval => 2, );

# error checking
pod2usage( -verbose => 1, -message => "-4 and -6 are mutually exclusive" )
  if $option{4} && $option{6};

# simple on-line help
print "$self version $VERSION\n" and exit if $option{version};
pod2usage( -verbose => 1 ) if $option{help};
pod2usage( -verbose => 2 ) if $option{manual};

# compute various host and port information
my ( %local, %target, %proxy );
@target{qw( host port )} = @ARGV;
$target{port} ||= 22;
if ( $option{local} ) {
    @local{qw( host port )} = split /:/, $option{local};
    $local{port} ||= $target{port};
}
if ( $option{http_proxy} ) {
    my ( $userinfo, $host ) = split /\@/, $option{http_proxy};
    ( $host, $userinfo ) = ( $userinfo, $host ) if !defined $host;
    ( $host, my $port ) = split /:/, $host;
    $proxy{http_proxy_host} = $host;
    $proxy{http_proxy_port} = $port if defined $port;
    @proxy{qw( http_proxy_userinfo http_proxy_user http_proxy_pass )} =
      ( $userinfo, split /:/, $userinfo )
      if defined $userinfo;
}

pod2usage( -verbose => 1, -message => "Remote host required" )
  if !defined $target{host};

# environment variables
$option{debug} = $ENV{SSH_SELECT_DEBUG} || 0
  if exists $ENV{SSH_SELECT_DEBUG};
$option{timeout} = $ENV{SSH_SELECT_TIMEOUT} || 0
  if exists $ENV{SSH_SELECT_TIMEOUT};


# TUNNEL SELECTION

my @cmd;

print STDERR "$self: version $VERSION\n" if $option{debug};

# ssh-keyscan successful: direct connection to the local name
if ( %local && try_keyscan( %option, %local ) ) {
    @cmd = cmd_socat( %option, %local );
}

# ssh-keyscan successful: direct connection to the public name
elsif ( try_keyscan( %option, %target ) ) {
    @cmd = cmd_socat( %option, %target );
}

# proxy connection successful: use the proxy
elsif ( %proxy && try_http_proxy( %option, %proxy ) ) {
    @cmd = cmd_http_proxy( %option, %target, %proxy );
}

# ssh ProxyCommand
elsif ( $option{proxy_command} && try_proxy_command( %option, %target ) ) {
    @cmd = cmd_proxy_command( %option, %target );
}

# ssh relay provided: run nc through it
elsif ( $option{relay} ) {
    my %relay;
    @relay{qw( host port )} = split /:/, $option{relay};
    @cmd = ('ssh');
    push @cmd, ('-v') x ( $option{debug} && $option{debug} - 1 );
    push @cmd, '-p', $relay{port} if $relay{port};
    push @cmd, '-4' if $option{4};
    push @cmd, '-6' if $option{6};
    push @cmd, $relay{host};
    push @cmd, cmd_nc( %option, %target );
}
else {
    die "No suitable connection method found\n";
}

# extract environment modifications
my ($env) = grep ref eq 'HASH', @cmd;
@cmd = grep !ref, @cmd;

# update the environment if needed
if ($env) {
    print STDERR "$self: environment: @{ [ keys %$env ] }\n" if $option{debug};
    @ENV{ keys %$env } = values %$env if $env;
}

# run the command
print STDERR "$self: command: @cmd\n" if $option{debug};
exec @cmd;

__END__

=head1 NAME

ssh-select - Try different proxying techniques to SSH to a remote host

=head1 SYNOPSIS

    ssh-select [options] host [port]

=head1 OPTIONS

    --local         <host>[:<port>]    Local name for direct connections
    --http-proxy    <host>[:<port>]    HTTP proxy (default port: 8080)
    --proxy-command <cmd>              SSH ProxyCommand option
    --relay         <host>[:<port>]    SSH relay (default port: 22)

    --key           <ssh-key>          Host key (for validation)
    --timeout       <seconds>          Connection timeout in seconds (default: 3)
                                       (SSH_SELECT_TIMEOUT environment variable)

    --debug                          * Increase debug level
                                       (SSH_SELECT_DEBUG environment variable)

    -4                                 Force IPv4
    -6                                 Force IPv6

    --help                             Print a short help summary and exit
    --manual                           Print the full manual page and exit

Options marked with * can be repeated as necessary.

=head1 DESCRIPTION

B<ssh-select> is a tool for transparently connecting to a SSH server from
different network setups. It is meant to be used as C<ProxyCommand> in
OpenSSH, and L<exec> a command that reads should read from its standard
input and write to its standard output.

The connection is attempted in multiple steps, each being tried after
the previous has failed:

=over 4

=item *

An C<ssh-keyscan> command is run against the target host.

If the I<--local> option is given, the keyscan step is attempted twice:
first against the "local" name, and then against the "public" name.
(This allows using a local name inside a home network, and a public
name outside.)

If a key is returned, then a direct connection to the host is started
(using C<socat>).

When the I<--key> option is given, the SSH connection will only be run
if the key returned by the host is identical. This is mostly useful when
a server on one of the networks has the same address as the target, but
is in fact a different machine.

=item *

If the I<--http-proxy> option is given, a connection to the given
HTTP proxy is attempted (using a C<HEAD> request). If that request is
successful, a tunnel is established through the proxy using the C<socat>
command, to connect to the "public" name.

The I<--http-proxy> option value is of the form:
C<[user:password@]proxyhost[:proxyport]>.
Basic authentication is supported by C<socat>.

=item *

If the I<--proxy-command> option is given, it is run (just like the
SSH C<ProxyCommand> option would be). If it returns a SSH-2 banner, it
is assumed to work correctly, and the connection is established using
that command.

The proxy command will only expand the C<%h> and C<%p> SSH tokens.

=item *

Finally, if the I<--relay> option is given, a SSH connection through the
relay is tried, running the C<nc> command on the relay (as C<nc> is
assumed to be more widely installed than C<socat>), to connect directly
to the target server (using its "public" name).

This option is basically a specialized I<--proxy-command> that uses C<nc>
over SSH.

=back

If everything fails, the connection is aborted.

=head1 EXAMPLES

Connect to a personal desktop using the local name on the home network,
the public dynamic DNS name from the outside, and the company proxy
from the company network:

    Host home
      Hostname home.example.com
      ProxyCommand ssh-select --local mybox --http proxy.bigcorp.com:3128 %h %p

Connect to a workstation directly from the company network, and via a bastion
host from the outside network:

    Host work
      Hostname work.example.com
      ProxyCommand ssh-select --relay bastion.example.com %h %p

If the company bastion host runs its own proxy program, that takes into
account the complexities of the network:

    Host complicated
      Hostname complicated.work.example.com
      ProxyCommand ssh-select --proxy 'ssh bastion.example.com ssh-proxy %%h %%p' %h %p

=head1 ENVIRONMENT

The following environment variables override the options given on the
command-line. This is useful for debugging, and easier than editing
the C<ProxyCommand> line in F<~/.ssh/config>.

=over 4

=item C<SSH_SELECT_DEBUG>

Sets the value for the I<--debug> option.

For example, a value of C<2> is equivalent to passing C<-v -v> on the
command-line.

=item C<SSH_SELECT_TIMEOUT>

Sets the value for the I<--timeout> option.

=back

=head1 DIAGNOSTICS

=over 4

=item C<No suitable connection method found>

All requested tunnels have been tried and none of them worked.

The I<--debug> option may provide more details. One possibility is that
the timeout is too short and all the connection attempts fail.

=back

=head1 SEE ALSO

ssh(1), socat(1), nc(1).

=head1 AUTHOR

Philippe Bruhat (BooK) <book@cpan.org>

=head1 COPYRIGHT AND LICENSE

Copyright 2018 by Philippe Bruhat (BooK).

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
